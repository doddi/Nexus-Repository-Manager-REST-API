/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.HttpClientConnectionAttributes;
import io.swagger.client.model.HttpClientConnectionAuthenticationAttributes;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * HttpClientAttributes
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-24T10:46:41.519+01:00[Europe/London]")
public class HttpClientAttributes {
  @SerializedName("blocked")
  private Boolean blocked = null;

  @SerializedName("autoBlock")
  private Boolean autoBlock = null;

  @SerializedName("connection")
  private HttpClientConnectionAttributes connection = null;

  @SerializedName("authentication")
  private HttpClientConnectionAuthenticationAttributes authentication = null;

  public HttpClientAttributes blocked(Boolean blocked) {
    this.blocked = blocked;
    return this;
  }

   /**
   * Whether to block outbound connections on the repository
   * @return blocked
  **/
  @Schema(example = "false", required = true, description = "Whether to block outbound connections on the repository")
  public Boolean isBlocked() {
    return blocked;
  }

  public void setBlocked(Boolean blocked) {
    this.blocked = blocked;
  }

  public HttpClientAttributes autoBlock(Boolean autoBlock) {
    this.autoBlock = autoBlock;
    return this;
  }

   /**
   * Whether to auto-block outbound connections if remote peer is detected as unreachable/unresponsive
   * @return autoBlock
  **/
  @Schema(example = "true", required = true, description = "Whether to auto-block outbound connections if remote peer is detected as unreachable/unresponsive")
  public Boolean isAutoBlock() {
    return autoBlock;
  }

  public void setAutoBlock(Boolean autoBlock) {
    this.autoBlock = autoBlock;
  }

  public HttpClientAttributes connection(HttpClientConnectionAttributes connection) {
    this.connection = connection;
    return this;
  }

   /**
   * Get connection
   * @return connection
  **/
  @Schema(description = "")
  public HttpClientConnectionAttributes getConnection() {
    return connection;
  }

  public void setConnection(HttpClientConnectionAttributes connection) {
    this.connection = connection;
  }

  public HttpClientAttributes authentication(HttpClientConnectionAuthenticationAttributes authentication) {
    this.authentication = authentication;
    return this;
  }

   /**
   * Get authentication
   * @return authentication
  **/
  @Schema(description = "")
  public HttpClientConnectionAuthenticationAttributes getAuthentication() {
    return authentication;
  }

  public void setAuthentication(HttpClientConnectionAuthenticationAttributes authentication) {
    this.authentication = authentication;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpClientAttributes httpClientAttributes = (HttpClientAttributes) o;
    return Objects.equals(this.blocked, httpClientAttributes.blocked) &&
        Objects.equals(this.autoBlock, httpClientAttributes.autoBlock) &&
        Objects.equals(this.connection, httpClientAttributes.connection) &&
        Objects.equals(this.authentication, httpClientAttributes.authentication);
  }

  @Override
  public int hashCode() {
    return Objects.hash(blocked, autoBlock, connection, authentication);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpClientAttributes {\n");
    
    sb.append("    blocked: ").append(toIndentedString(blocked)).append("\n");
    sb.append("    autoBlock: ").append(toIndentedString(autoBlock)).append("\n");
    sb.append("    connection: ").append(toIndentedString(connection)).append("\n");
    sb.append("    authentication: ").append(toIndentedString(authentication)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
