/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * RoutingRuleXO
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-24T10:46:41.519+01:00[Europe/London]")
public class RoutingRuleXO {
  @SerializedName("name")
  private String name = null;

  @SerializedName("description")
  private String description = null;

  /**
   * Determines what should be done with requests when their path matches any of the matchers
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    BLOCK("BLOCK"),
    ALLOW("ALLOW");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static ModeEnum fromValue(String text) {
      for (ModeEnum b : ModeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return ModeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("mode")
  private ModeEnum mode = null;

  @SerializedName("matchers")
  private List<String> matchers = null;

  public RoutingRuleXO name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @Schema(description = "")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public RoutingRuleXO description(String description) {
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public RoutingRuleXO mode(ModeEnum mode) {
    this.mode = mode;
    return this;
  }

   /**
   * Determines what should be done with requests when their path matches any of the matchers
   * @return mode
  **/
  @Schema(description = "Determines what should be done with requests when their path matches any of the matchers")
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(ModeEnum mode) {
    this.mode = mode;
  }

  public RoutingRuleXO matchers(List<String> matchers) {
    this.matchers = matchers;
    return this;
  }

  public RoutingRuleXO addMatchersItem(String matchersItem) {
    if (this.matchers == null) {
      this.matchers = new ArrayList<String>();
    }
    this.matchers.add(matchersItem);
    return this;
  }

   /**
   * Regular expressions used to identify request paths that are allowed or blocked (depending on mode)
   * @return matchers
  **/
  @Schema(description = "Regular expressions used to identify request paths that are allowed or blocked (depending on mode)")
  public List<String> getMatchers() {
    return matchers;
  }

  public void setMatchers(List<String> matchers) {
    this.matchers = matchers;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutingRuleXO routingRuleXO = (RoutingRuleXO) o;
    return Objects.equals(this.name, routingRuleXO.name) &&
        Objects.equals(this.description, routingRuleXO.description) &&
        Objects.equals(this.mode, routingRuleXO.mode) &&
        Objects.equals(this.matchers, routingRuleXO.matchers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, mode, matchers);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutingRuleXO {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    matchers: ").append(toIndentedString(matchers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
