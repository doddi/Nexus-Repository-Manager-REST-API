/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ContentSelectorApiResponse
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-24T10:46:41.519+01:00[Europe/London]")
public class ContentSelectorApiResponse {
  @SerializedName("name")
  private String name = null;

  /**
   * The type of content selector the backend is using
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    CSEL("csel"),
    JEXL("jexl");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TypeEnum fromValue(String text) {
      for (TypeEnum b : TypeEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return TypeEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("type")
  private TypeEnum type = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("expression")
  private String expression = null;

  public ContentSelectorApiResponse name(String name) {
    this.name = name;
    return this;
  }

   /**
   * The content selector name cannot be changed after creation
   * @return name
  **/
  @Schema(description = "The content selector name cannot be changed after creation")
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public ContentSelectorApiResponse type(TypeEnum type) {
    this.type = type;
    return this;
  }

   /**
   * The type of content selector the backend is using
   * @return type
  **/
  @Schema(description = "The type of content selector the backend is using")
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }

  public ContentSelectorApiResponse description(String description) {
    this.description = description;
    return this;
  }

   /**
   * A human-readable description
   * @return description
  **/
  @Schema(description = "A human-readable description")
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }

  public ContentSelectorApiResponse expression(String expression) {
    this.expression = expression;
    return this;
  }

   /**
   * The expression used to identify content
   * @return expression
  **/
  @Schema(example = "format == \"maven2\" and path =^ \"/org/sonatype/nexus\"", description = "The expression used to identify content")
  public String getExpression() {
    return expression;
  }

  public void setExpression(String expression) {
    this.expression = expression;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentSelectorApiResponse contentSelectorApiResponse = (ContentSelectorApiResponse) o;
    return Objects.equals(this.name, contentSelectorApiResponse.name) &&
        Objects.equals(this.type, contentSelectorApiResponse.type) &&
        Objects.equals(this.description, contentSelectorApiResponse.description) &&
        Objects.equals(this.expression, contentSelectorApiResponse.expression);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, type, description, expression);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentSelectorApiResponse {\n");
    
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expression: ").append(toIndentedString(expression)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
