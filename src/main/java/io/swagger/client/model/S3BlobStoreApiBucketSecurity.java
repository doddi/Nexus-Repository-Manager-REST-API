/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * S3BlobStoreApiBucketSecurity
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-24T10:46:41.519+01:00[Europe/London]")
public class S3BlobStoreApiBucketSecurity {
  @SerializedName("accessKeyId")
  private String accessKeyId = null;

  @SerializedName("secretAccessKey")
  private String secretAccessKey = null;

  @SerializedName("role")
  private String role = null;

  @SerializedName("sessionToken")
  private String sessionToken = null;

  public S3BlobStoreApiBucketSecurity accessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
    return this;
  }

   /**
   * An IAM access key ID for granting access to the S3 bucket
   * @return accessKeyId
  **/
  @Schema(description = "An IAM access key ID for granting access to the S3 bucket")
  public String getAccessKeyId() {
    return accessKeyId;
  }

  public void setAccessKeyId(String accessKeyId) {
    this.accessKeyId = accessKeyId;
  }

  public S3BlobStoreApiBucketSecurity secretAccessKey(String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
    return this;
  }

   /**
   * The secret access key associated with the specified IAM access key ID
   * @return secretAccessKey
  **/
  @Schema(description = "The secret access key associated with the specified IAM access key ID")
  public String getSecretAccessKey() {
    return secretAccessKey;
  }

  public void setSecretAccessKey(String secretAccessKey) {
    this.secretAccessKey = secretAccessKey;
  }

  public S3BlobStoreApiBucketSecurity role(String role) {
    this.role = role;
    return this;
  }

   /**
   * An IAM role to assume in order to access the S3 bucket
   * @return role
  **/
  @Schema(description = "An IAM role to assume in order to access the S3 bucket")
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }

  public S3BlobStoreApiBucketSecurity sessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
    return this;
  }

   /**
   * An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket
   * @return sessionToken
  **/
  @Schema(description = "An AWS STS session token associated with temporary security credentials which grant access to the S3 bucket")
  public String getSessionToken() {
    return sessionToken;
  }

  public void setSessionToken(String sessionToken) {
    this.sessionToken = sessionToken;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    S3BlobStoreApiBucketSecurity s3BlobStoreApiBucketSecurity = (S3BlobStoreApiBucketSecurity) o;
    return Objects.equals(this.accessKeyId, s3BlobStoreApiBucketSecurity.accessKeyId) &&
        Objects.equals(this.secretAccessKey, s3BlobStoreApiBucketSecurity.secretAccessKey) &&
        Objects.equals(this.role, s3BlobStoreApiBucketSecurity.role) &&
        Objects.equals(this.sessionToken, s3BlobStoreApiBucketSecurity.sessionToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessKeyId, secretAccessKey, role, sessionToken);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class S3BlobStoreApiBucketSecurity {\n");
    
    sb.append("    accessKeyId: ").append(toIndentedString(accessKeyId)).append("\n");
    sb.append("    secretAccessKey: ").append(toIndentedString(secretAccessKey)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    sessionToken: ").append(toIndentedString(sessionToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
