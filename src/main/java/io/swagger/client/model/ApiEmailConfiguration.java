/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
/**
 * ApiEmailConfiguration
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-24T10:46:41.519+01:00[Europe/London]")
public class ApiEmailConfiguration {
  @SerializedName("enabled")
  private Boolean enabled = null;

  @SerializedName("host")
  private String host = null;

  @SerializedName("port")
  private Integer port = null;

  @SerializedName("username")
  private String username = null;

  @SerializedName("password")
  private String password = null;

  @SerializedName("fromAddress")
  private String fromAddress = null;

  @SerializedName("subjectPrefix")
  private String subjectPrefix = null;

  @SerializedName("startTlsEnabled")
  private Boolean startTlsEnabled = null;

  @SerializedName("startTlsRequired")
  private Boolean startTlsRequired = null;

  @SerializedName("sslOnConnectEnabled")
  private Boolean sslOnConnectEnabled = null;

  @SerializedName("sslServerIdentityCheckEnabled")
  private Boolean sslServerIdentityCheckEnabled = null;

  @SerializedName("nexusTrustStoreEnabled")
  private Boolean nexusTrustStoreEnabled = null;

  public ApiEmailConfiguration enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

   /**
   * Get enabled
   * @return enabled
  **/
  @Schema(description = "")
  public Boolean isEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }

  public ApiEmailConfiguration host(String host) {
    this.host = host;
    return this;
  }

   /**
   * Get host
   * @return host
  **/
  @Schema(description = "")
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public ApiEmailConfiguration port(Integer port) {
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @Schema(required = true, description = "")
  public Integer getPort() {
    return port;
  }

  public void setPort(Integer port) {
    this.port = port;
  }

  public ApiEmailConfiguration username(String username) {
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @Schema(description = "")
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }

  public ApiEmailConfiguration password(String password) {
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @Schema(description = "")
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public ApiEmailConfiguration fromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
    return this;
  }

   /**
   * Get fromAddress
   * @return fromAddress
  **/
  @Schema(example = "nexus@example.org", description = "")
  public String getFromAddress() {
    return fromAddress;
  }

  public void setFromAddress(String fromAddress) {
    this.fromAddress = fromAddress;
  }

  public ApiEmailConfiguration subjectPrefix(String subjectPrefix) {
    this.subjectPrefix = subjectPrefix;
    return this;
  }

   /**
   * A prefix to add to all email subjects to aid in identifying automated emails
   * @return subjectPrefix
  **/
  @Schema(description = "A prefix to add to all email subjects to aid in identifying automated emails")
  public String getSubjectPrefix() {
    return subjectPrefix;
  }

  public void setSubjectPrefix(String subjectPrefix) {
    this.subjectPrefix = subjectPrefix;
  }

  public ApiEmailConfiguration startTlsEnabled(Boolean startTlsEnabled) {
    this.startTlsEnabled = startTlsEnabled;
    return this;
  }

   /**
   * Enable STARTTLS Support for Insecure Connections
   * @return startTlsEnabled
  **/
  @Schema(description = "Enable STARTTLS Support for Insecure Connections")
  public Boolean isStartTlsEnabled() {
    return startTlsEnabled;
  }

  public void setStartTlsEnabled(Boolean startTlsEnabled) {
    this.startTlsEnabled = startTlsEnabled;
  }

  public ApiEmailConfiguration startTlsRequired(Boolean startTlsRequired) {
    this.startTlsRequired = startTlsRequired;
    return this;
  }

   /**
   * Require STARTTLS Support
   * @return startTlsRequired
  **/
  @Schema(description = "Require STARTTLS Support")
  public Boolean isStartTlsRequired() {
    return startTlsRequired;
  }

  public void setStartTlsRequired(Boolean startTlsRequired) {
    this.startTlsRequired = startTlsRequired;
  }

  public ApiEmailConfiguration sslOnConnectEnabled(Boolean sslOnConnectEnabled) {
    this.sslOnConnectEnabled = sslOnConnectEnabled;
    return this;
  }

   /**
   * Enable SSL/TLS Encryption upon Connection
   * @return sslOnConnectEnabled
  **/
  @Schema(description = "Enable SSL/TLS Encryption upon Connection")
  public Boolean isSslOnConnectEnabled() {
    return sslOnConnectEnabled;
  }

  public void setSslOnConnectEnabled(Boolean sslOnConnectEnabled) {
    this.sslOnConnectEnabled = sslOnConnectEnabled;
  }

  public ApiEmailConfiguration sslServerIdentityCheckEnabled(Boolean sslServerIdentityCheckEnabled) {
    this.sslServerIdentityCheckEnabled = sslServerIdentityCheckEnabled;
    return this;
  }

   /**
   * Verify the server certificate when using TLS or SSL
   * @return sslServerIdentityCheckEnabled
  **/
  @Schema(description = "Verify the server certificate when using TLS or SSL")
  public Boolean isSslServerIdentityCheckEnabled() {
    return sslServerIdentityCheckEnabled;
  }

  public void setSslServerIdentityCheckEnabled(Boolean sslServerIdentityCheckEnabled) {
    this.sslServerIdentityCheckEnabled = sslServerIdentityCheckEnabled;
  }

  public ApiEmailConfiguration nexusTrustStoreEnabled(Boolean nexusTrustStoreEnabled) {
    this.nexusTrustStoreEnabled = nexusTrustStoreEnabled;
    return this;
  }

   /**
   * Use the Nexus Repository Manager&#x27;s certificate truststore
   * @return nexusTrustStoreEnabled
  **/
  @Schema(description = "Use the Nexus Repository Manager's certificate truststore")
  public Boolean isNexusTrustStoreEnabled() {
    return nexusTrustStoreEnabled;
  }

  public void setNexusTrustStoreEnabled(Boolean nexusTrustStoreEnabled) {
    this.nexusTrustStoreEnabled = nexusTrustStoreEnabled;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiEmailConfiguration apiEmailConfiguration = (ApiEmailConfiguration) o;
    return Objects.equals(this.enabled, apiEmailConfiguration.enabled) &&
        Objects.equals(this.host, apiEmailConfiguration.host) &&
        Objects.equals(this.port, apiEmailConfiguration.port) &&
        Objects.equals(this.username, apiEmailConfiguration.username) &&
        Objects.equals(this.password, apiEmailConfiguration.password) &&
        Objects.equals(this.fromAddress, apiEmailConfiguration.fromAddress) &&
        Objects.equals(this.subjectPrefix, apiEmailConfiguration.subjectPrefix) &&
        Objects.equals(this.startTlsEnabled, apiEmailConfiguration.startTlsEnabled) &&
        Objects.equals(this.startTlsRequired, apiEmailConfiguration.startTlsRequired) &&
        Objects.equals(this.sslOnConnectEnabled, apiEmailConfiguration.sslOnConnectEnabled) &&
        Objects.equals(this.sslServerIdentityCheckEnabled, apiEmailConfiguration.sslServerIdentityCheckEnabled) &&
        Objects.equals(this.nexusTrustStoreEnabled, apiEmailConfiguration.nexusTrustStoreEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, host, port, username, password, fromAddress, subjectPrefix, startTlsEnabled, startTlsRequired, sslOnConnectEnabled, sslServerIdentityCheckEnabled, nexusTrustStoreEnabled);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiEmailConfiguration {\n");
    
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    fromAddress: ").append(toIndentedString(fromAddress)).append("\n");
    sb.append("    subjectPrefix: ").append(toIndentedString(subjectPrefix)).append("\n");
    sb.append("    startTlsEnabled: ").append(toIndentedString(startTlsEnabled)).append("\n");
    sb.append("    startTlsRequired: ").append(toIndentedString(startTlsRequired)).append("\n");
    sb.append("    sslOnConnectEnabled: ").append(toIndentedString(sslOnConnectEnabled)).append("\n");
    sb.append("    sslServerIdentityCheckEnabled: ").append(toIndentedString(sslServerIdentityCheckEnabled)).append("\n");
    sb.append("    nexusTrustStoreEnabled: ").append(toIndentedString(nexusTrustStoreEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
