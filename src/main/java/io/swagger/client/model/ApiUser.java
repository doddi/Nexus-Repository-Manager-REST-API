/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * ApiUser
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2020-08-24T10:46:41.519+01:00[Europe/London]")
public class ApiUser {
  @SerializedName("userId")
  private String userId = null;

  @SerializedName("firstName")
  private String firstName = null;

  @SerializedName("lastName")
  private String lastName = null;

  @SerializedName("emailAddress")
  private String emailAddress = null;

  @SerializedName("source")
  private String source = null;

  /**
   * The user&#x27;s status, e.g. active or disabled.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    ACTIVE("active"),
    LOCKED("locked"),
    DISABLED("disabled"),
    CHANGEPASSWORD("changepassword");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static StatusEnum fromValue(String text) {
      for (StatusEnum b : StatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return StatusEnum.fromValue(String.valueOf(value));
      }
    }
  }  @SerializedName("status")
  private StatusEnum status = null;

  @SerializedName("readOnly")
  private Boolean readOnly = null;

  @SerializedName("roles")
  private List<String> roles = null;

  @SerializedName("externalRoles")
  private List<String> externalRoles = null;

  public ApiUser userId(String userId) {
    this.userId = userId;
    return this;
  }

   /**
   * The userid which is required for login. This value cannot be changed.
   * @return userId
  **/
  @Schema(description = "The userid which is required for login. This value cannot be changed.")
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }

  public ApiUser firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

   /**
   * The first name of the user.
   * @return firstName
  **/
  @Schema(description = "The first name of the user.")
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public ApiUser lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

   /**
   * The last name of the user.
   * @return lastName
  **/
  @Schema(description = "The last name of the user.")
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public ApiUser emailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * The email address associated with the user.
   * @return emailAddress
  **/
  @Schema(description = "The email address associated with the user.")
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }

  public ApiUser source(String source) {
    this.source = source;
    return this;
  }

   /**
   * The user source which is the origin of this user. This value cannot be changed.
   * @return source
  **/
  @Schema(description = "The user source which is the origin of this user. This value cannot be changed.")
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }

  public ApiUser status(StatusEnum status) {
    this.status = status;
    return this;
  }

   /**
   * The user&#x27;s status, e.g. active or disabled.
   * @return status
  **/
  @Schema(required = true, description = "The user's status, e.g. active or disabled.")
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }

  public ApiUser readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

   /**
   * Indicates whether the user&#x27;s properties could be modified by the Nexus Repository Manager. When false only roles are considered during update.
   * @return readOnly
  **/
  @Schema(description = "Indicates whether the user's properties could be modified by the Nexus Repository Manager. When false only roles are considered during update.")
  public Boolean isReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }

  public ApiUser roles(List<String> roles) {
    this.roles = roles;
    return this;
  }

  public ApiUser addRolesItem(String rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<String>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * The roles which the user has been assigned within Nexus.
   * @return roles
  **/
  @Schema(description = "The roles which the user has been assigned within Nexus.")
  public List<String> getRoles() {
    return roles;
  }

  public void setRoles(List<String> roles) {
    this.roles = roles;
  }

  public ApiUser externalRoles(List<String> externalRoles) {
    this.externalRoles = externalRoles;
    return this;
  }

  public ApiUser addExternalRolesItem(String externalRolesItem) {
    if (this.externalRoles == null) {
      this.externalRoles = new ArrayList<String>();
    }
    this.externalRoles.add(externalRolesItem);
    return this;
  }

   /**
   * The roles which the user has been assigned in an external source, e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.
   * @return externalRoles
  **/
  @Schema(description = "The roles which the user has been assigned in an external source, e.g. LDAP group. These cannot be changed within the Nexus Repository Manager.")
  public List<String> getExternalRoles() {
    return externalRoles;
  }

  public void setExternalRoles(List<String> externalRoles) {
    this.externalRoles = externalRoles;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiUser apiUser = (ApiUser) o;
    return Objects.equals(this.userId, apiUser.userId) &&
        Objects.equals(this.firstName, apiUser.firstName) &&
        Objects.equals(this.lastName, apiUser.lastName) &&
        Objects.equals(this.emailAddress, apiUser.emailAddress) &&
        Objects.equals(this.source, apiUser.source) &&
        Objects.equals(this.status, apiUser.status) &&
        Objects.equals(this.readOnly, apiUser.readOnly) &&
        Objects.equals(this.roles, apiUser.roles) &&
        Objects.equals(this.externalRoles, apiUser.externalRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, firstName, lastName, emailAddress, source, status, readOnly, roles, externalRoles);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiUser {\n");
    
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    externalRoles: ").append(toIndentedString(externalRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
