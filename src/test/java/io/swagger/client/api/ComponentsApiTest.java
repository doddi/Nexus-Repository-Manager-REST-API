/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ComponentXO;
import java.io.File;
import io.swagger.client.model.PageComponentXO;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ComponentsApi
 */
@Ignore
public class ComponentsApiTest {

    private final ComponentsApi api = new ComponentsApi();

    /**
     * Delete a single component
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteComponentTest() throws ApiException {
        String id = null;
        api.deleteComponent(id);

        // TODO: test validations
    }
    /**
     * Get a single component
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComponentByIdTest() throws ApiException {
        String id = null;
        ComponentXO response = api.getComponentById(id);

        // TODO: test validations
    }
    /**
     * List components
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getComponentsTest() throws ApiException {
        String repository = null;
        String continuationToken = null;
        PageComponentXO response = api.getComponents(repository, continuationToken);

        // TODO: test validations
    }
    /**
     * Upload a single component
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadComponentTest() throws ApiException {
        String repository = null;
        String yumDirectory = null;
        String yumTag = null;
        File yumAsset = null;
        String yumAssetFilename = null;
        String dockerTag = null;
        File dockerAsset = null;
        String rTag = null;
        File rAsset = null;
        String rAssetPathId = null;
        String pypiTag = null;
        File pypiAsset = null;
        String aptTag = null;
        File aptAsset = null;
        String rubygemsTag = null;
        File rubygemsAsset = null;
        String npmTag = null;
        File npmAsset = null;
        String nugetTag = null;
        File nugetAsset = null;
        String helmTag = null;
        File helmAsset = null;
        String rawDirectory = null;
        String rawTag = null;
        File rawAsset1 = null;
        String rawAsset1Filename = null;
        File rawAsset2 = null;
        String rawAsset2Filename = null;
        File rawAsset3 = null;
        String rawAsset3Filename = null;
        String maven2GroupId = null;
        String maven2ArtifactId = null;
        String maven2Version = null;
        Boolean maven2GeneratePom = null;
        String maven2Packaging = null;
        String maven2Tag = null;
        File maven2Asset1 = null;
        String maven2Asset1Classifier = null;
        String maven2Asset1Extension = null;
        File maven2Asset2 = null;
        String maven2Asset2Classifier = null;
        String maven2Asset2Extension = null;
        File maven2Asset3 = null;
        String maven2Asset3Classifier = null;
        String maven2Asset3Extension = null;
        api.uploadComponent(repository, yumDirectory, yumTag, yumAsset, yumAssetFilename, dockerTag, dockerAsset, rTag, rAsset, rAssetPathId, pypiTag, pypiAsset, aptTag, aptAsset, rubygemsTag, rubygemsAsset, npmTag, npmAsset, nugetTag, nugetAsset, helmTag, helmAsset, rawDirectory, rawTag, rawAsset1, rawAsset1Filename, rawAsset2, rawAsset2Filename, rawAsset3, rawAsset3Filename, maven2GroupId, maven2ArtifactId, maven2Version, maven2GeneratePom, maven2Packaging, maven2Tag, maven2Asset1, maven2Asset1Classifier, maven2Asset1Extension, maven2Asset2, maven2Asset2Classifier, maven2Asset2Extension, maven2Asset3, maven2Asset3Classifier, maven2Asset3Extension);

        // TODO: test validations
    }
}
