/*
 * Nexus Repository Manager REST API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 3.27.0-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.AbstractApiRepository;
import io.swagger.client.model.AptHostedRepositoryApiRequest;
import io.swagger.client.model.AptProxyRepositoryApiRequest;
import io.swagger.client.model.BowerGroupRepositoryApiRequest;
import io.swagger.client.model.BowerHostedRepositoryApiRequest;
import io.swagger.client.model.BowerProxyRepositoryApiRequest;
import io.swagger.client.model.CocoapodsProxyRepositoryApiRequest;
import io.swagger.client.model.ConanProxyRepositoryApiRequest;
import io.swagger.client.model.DockerGroupRepositoryApiRequest;
import io.swagger.client.model.DockerHostedRepositoryApiRequest;
import io.swagger.client.model.DockerProxyRepositoryApiRequest;
import io.swagger.client.model.GitLfsHostedRepositoryApiRequest;
import io.swagger.client.model.GolangGroupRepositoryApiRequest;
import io.swagger.client.model.GolangProxyRepositoryApiRequest;
import io.swagger.client.model.HelmHostedRepositoryApiRequest;
import io.swagger.client.model.HelmProxyRepositoryApiRequest;
import io.swagger.client.model.MavenGroupRepositoryApiRequest;
import io.swagger.client.model.MavenHostedRepositoryApiRequest;
import io.swagger.client.model.MavenProxyRepositoryApiRequest;
import io.swagger.client.model.NpmGroupRepositoryApiRequest;
import io.swagger.client.model.NpmHostedRepositoryApiRequest;
import io.swagger.client.model.NpmProxyRepositoryApiRequest;
import io.swagger.client.model.NugetGroupRepositoryApiRequest;
import io.swagger.client.model.NugetHostedRepositoryApiRequest;
import io.swagger.client.model.NugetProxyRepositoryApiRequest;
import io.swagger.client.model.P2ProxyRepositoryApiRequest;
import io.swagger.client.model.PypiGroupRepositoryApiRequest;
import io.swagger.client.model.PypiHostedRepositoryApiRequest;
import io.swagger.client.model.PypiProxyRepositoryApiRequest;
import io.swagger.client.model.RGroupRepositoryApiRequest;
import io.swagger.client.model.RHostedRepositoryApiRequest;
import io.swagger.client.model.RProxyRepositoryApiRequest;
import io.swagger.client.model.RawGroupRepositoryApiRequest;
import io.swagger.client.model.RawHostedRepositoryApiRequest;
import io.swagger.client.model.RawProxyRepositoryApiRequest;
import io.swagger.client.model.RubyGemsGroupRepositoryApiRequest;
import io.swagger.client.model.RubyGemsHostedRepositoryApiRequest;
import io.swagger.client.model.RubyGemsProxyRepositoryApiRequest;
import io.swagger.client.model.YumGroupRepositoryApiRequest;
import io.swagger.client.model.YumHostedRepositoryApiRequest;
import io.swagger.client.model.YumProxyRepositoryApiRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RepositoryManagementApi
 */
@Ignore
public class RepositoryManagementApiTest {

    private final RepositoryManagementApi api = new RepositoryManagementApi();

    /**
     * Create Maven group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepositoryTest() throws ApiException {
        MavenGroupRepositoryApiRequest body = null;
        api.createRepository(body);

        // TODO: test validations
    }
    /**
     * Create Maven hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository1Test() throws ApiException {
        MavenHostedRepositoryApiRequest body = null;
        api.createRepository1(body);

        // TODO: test validations
    }
    /**
     * Create NuGet proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository10Test() throws ApiException {
        NugetProxyRepositoryApiRequest body = null;
        api.createRepository10(body);

        // TODO: test validations
    }
    /**
     * Create npm group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository11Test() throws ApiException {
        NpmGroupRepositoryApiRequest body = null;
        api.createRepository11(body);

        // TODO: test validations
    }
    /**
     * Create npm hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository12Test() throws ApiException {
        NpmHostedRepositoryApiRequest body = null;
        api.createRepository12(body);

        // TODO: test validations
    }
    /**
     * Create npm proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository13Test() throws ApiException {
        NpmProxyRepositoryApiRequest body = null;
        api.createRepository13(body);

        // TODO: test validations
    }
    /**
     * Create RubyGems group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository14Test() throws ApiException {
        RubyGemsGroupRepositoryApiRequest body = null;
        api.createRepository14(body);

        // TODO: test validations
    }
    /**
     * Create RubyGems hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository15Test() throws ApiException {
        RubyGemsHostedRepositoryApiRequest body = null;
        api.createRepository15(body);

        // TODO: test validations
    }
    /**
     * Create RubyGems proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository16Test() throws ApiException {
        RubyGemsProxyRepositoryApiRequest body = null;
        api.createRepository16(body);

        // TODO: test validations
    }
    /**
     * Create APT hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository17Test() throws ApiException {
        AptHostedRepositoryApiRequest body = null;
        api.createRepository17(body);

        // TODO: test validations
    }
    /**
     * Create APT proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository18Test() throws ApiException {
        AptProxyRepositoryApiRequest body = null;
        api.createRepository18(body);

        // TODO: test validations
    }
    /**
     * Create Cocoapods proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository19Test() throws ApiException {
        CocoapodsProxyRepositoryApiRequest body = null;
        api.createRepository19(body);

        // TODO: test validations
    }
    /**
     * Create Maven proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository2Test() throws ApiException {
        MavenProxyRepositoryApiRequest body = null;
        api.createRepository2(body);

        // TODO: test validations
    }
    /**
     * Create a Go group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository20Test() throws ApiException {
        GolangGroupRepositoryApiRequest body = null;
        api.createRepository20(body);

        // TODO: test validations
    }
    /**
     * Create a Go proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository21Test() throws ApiException {
        GolangProxyRepositoryApiRequest body = null;
        api.createRepository21(body);

        // TODO: test validations
    }
    /**
     * Create PyPI group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository22Test() throws ApiException {
        PypiGroupRepositoryApiRequest body = null;
        api.createRepository22(body);

        // TODO: test validations
    }
    /**
     * Create PyPI hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository23Test() throws ApiException {
        PypiHostedRepositoryApiRequest body = null;
        api.createRepository23(body);

        // TODO: test validations
    }
    /**
     * Create PyPI proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository24Test() throws ApiException {
        PypiProxyRepositoryApiRequest body = null;
        api.createRepository24(body);

        // TODO: test validations
    }
    /**
     * Create Conan proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository25Test() throws ApiException {
        ConanProxyRepositoryApiRequest body = null;
        api.createRepository25(body);

        // TODO: test validations
    }
    /**
     * Create p2 proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository26Test() throws ApiException {
        P2ProxyRepositoryApiRequest body = null;
        api.createRepository26(body);

        // TODO: test validations
    }
    /**
     * Create R group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository27Test() throws ApiException {
        RGroupRepositoryApiRequest body = null;
        api.createRepository27(body);

        // TODO: test validations
    }
    /**
     * Create R hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository28Test() throws ApiException {
        RHostedRepositoryApiRequest body = null;
        api.createRepository28(body);

        // TODO: test validations
    }
    /**
     * Create R proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository29Test() throws ApiException {
        RProxyRepositoryApiRequest body = null;
        api.createRepository29(body);

        // TODO: test validations
    }
    /**
     * Create raw group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository3Test() throws ApiException {
        RawGroupRepositoryApiRequest body = null;
        api.createRepository3(body);

        // TODO: test validations
    }
    /**
     * Create Bower group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository30Test() throws ApiException {
        BowerGroupRepositoryApiRequest body = null;
        api.createRepository30(body);

        // TODO: test validations
    }
    /**
     * Create Bower hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository31Test() throws ApiException {
        BowerHostedRepositoryApiRequest body = null;
        api.createRepository31(body);

        // TODO: test validations
    }
    /**
     * Create Bower proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository32Test() throws ApiException {
        BowerProxyRepositoryApiRequest body = null;
        api.createRepository32(body);

        // TODO: test validations
    }
    /**
     * Create Docker group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository33Test() throws ApiException {
        DockerGroupRepositoryApiRequest body = null;
        api.createRepository33(body);

        // TODO: test validations
    }
    /**
     * Create Docker hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository34Test() throws ApiException {
        DockerHostedRepositoryApiRequest body = null;
        api.createRepository34(body);

        // TODO: test validations
    }
    /**
     * Create Docker proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository35Test() throws ApiException {
        DockerProxyRepositoryApiRequest body = null;
        api.createRepository35(body);

        // TODO: test validations
    }
    /**
     * Create Git LFS hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository36Test() throws ApiException {
        GitLfsHostedRepositoryApiRequest body = null;
        api.createRepository36(body);

        // TODO: test validations
    }
    /**
     * Create Yum group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository37Test() throws ApiException {
        YumGroupRepositoryApiRequest body = null;
        api.createRepository37(body);

        // TODO: test validations
    }
    /**
     * Create Yum hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository38Test() throws ApiException {
        YumHostedRepositoryApiRequest body = null;
        api.createRepository38(body);

        // TODO: test validations
    }
    /**
     * Create Yum proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository39Test() throws ApiException {
        YumProxyRepositoryApiRequest body = null;
        api.createRepository39(body);

        // TODO: test validations
    }
    /**
     * Create raw hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository4Test() throws ApiException {
        RawHostedRepositoryApiRequest body = null;
        api.createRepository4(body);

        // TODO: test validations
    }
    /**
     * Create raw proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository5Test() throws ApiException {
        RawProxyRepositoryApiRequest body = null;
        api.createRepository5(body);

        // TODO: test validations
    }
    /**
     * Create Helm hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository6Test() throws ApiException {
        HelmHostedRepositoryApiRequest body = null;
        api.createRepository6(body);

        // TODO: test validations
    }
    /**
     * Create Helm proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository7Test() throws ApiException {
        HelmProxyRepositoryApiRequest body = null;
        api.createRepository7(body);

        // TODO: test validations
    }
    /**
     * Create NuGet group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository8Test() throws ApiException {
        NugetGroupRepositoryApiRequest body = null;
        api.createRepository8(body);

        // TODO: test validations
    }
    /**
     * Create NuGet hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRepository9Test() throws ApiException {
        NugetHostedRepositoryApiRequest body = null;
        api.createRepository9(body);

        // TODO: test validations
    }
    /**
     * Delete repository of any format
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRepositoryTest() throws ApiException {
        String repositoryName = null;
        api.deleteRepository(repositoryName);

        // TODO: test validations
    }
    /**
     * Disable repository health check. Proxy repositories only.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableRepositoryHealthCheckTest() throws ApiException {
        String repositoryName = null;
        api.disableRepositoryHealthCheck(repositoryName);

        // TODO: test validations
    }
    /**
     * Enable repository health check. Proxy repositories only.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableRepositoryHealthCheckTest() throws ApiException {
        String repositoryName = null;
        api.enableRepositoryHealthCheck(repositoryName);

        // TODO: test validations
    }
    /**
     * List repositories
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRepositoriesTest() throws ApiException {
        List<AbstractApiRepository> response = api.getRepositories();

        // TODO: test validations
    }
    /**
     * Invalidate repository cache. Proxy or group repositories only.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void invalidateCacheTest() throws ApiException {
        String repositoryName = null;
        api.invalidateCache(repositoryName);

        // TODO: test validations
    }
    /**
     * Schedule a &#x27;Repair - Rebuild repository search&#x27; Task. Hosted or proxy repositories only.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rebuildIndexTest() throws ApiException {
        String repositoryName = null;
        api.rebuildIndex(repositoryName);

        // TODO: test validations
    }
    /**
     * Update Maven group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepositoryTest() throws ApiException {
        String repositoryName = null;
        MavenGroupRepositoryApiRequest body = null;
        api.updateRepository(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Maven hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository1Test() throws ApiException {
        String repositoryName = null;
        MavenHostedRepositoryApiRequest body = null;
        api.updateRepository1(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update NuGet proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository10Test() throws ApiException {
        String repositoryName = null;
        NugetProxyRepositoryApiRequest body = null;
        api.updateRepository10(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update npm group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository11Test() throws ApiException {
        String repositoryName = null;
        NpmGroupRepositoryApiRequest body = null;
        api.updateRepository11(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update npm hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository12Test() throws ApiException {
        String repositoryName = null;
        NpmHostedRepositoryApiRequest body = null;
        api.updateRepository12(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update npm proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository13Test() throws ApiException {
        String repositoryName = null;
        NpmProxyRepositoryApiRequest body = null;
        api.updateRepository13(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update RubyGems group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository14Test() throws ApiException {
        String repositoryName = null;
        RubyGemsGroupRepositoryApiRequest body = null;
        api.updateRepository14(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update RubyGems hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository15Test() throws ApiException {
        String repositoryName = null;
        RubyGemsHostedRepositoryApiRequest body = null;
        api.updateRepository15(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update RubyGems proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository16Test() throws ApiException {
        String repositoryName = null;
        RubyGemsProxyRepositoryApiRequest body = null;
        api.updateRepository16(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update APT hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository17Test() throws ApiException {
        String repositoryName = null;
        AptHostedRepositoryApiRequest body = null;
        api.updateRepository17(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update APT proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository18Test() throws ApiException {
        String repositoryName = null;
        AptProxyRepositoryApiRequest body = null;
        api.updateRepository18(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Cocoapods proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository19Test() throws ApiException {
        String repositoryName = null;
        CocoapodsProxyRepositoryApiRequest body = null;
        api.updateRepository19(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Maven proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository2Test() throws ApiException {
        String repositoryName = null;
        MavenProxyRepositoryApiRequest body = null;
        api.updateRepository2(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update a Go group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository20Test() throws ApiException {
        String repositoryName = null;
        GolangGroupRepositoryApiRequest body = null;
        api.updateRepository20(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update a Go proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository21Test() throws ApiException {
        String repositoryName = null;
        GolangProxyRepositoryApiRequest body = null;
        api.updateRepository21(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update PyPI group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository22Test() throws ApiException {
        String repositoryName = null;
        PypiGroupRepositoryApiRequest body = null;
        api.updateRepository22(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update PyPI hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository23Test() throws ApiException {
        String repositoryName = null;
        PypiHostedRepositoryApiRequest body = null;
        api.updateRepository23(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update PyPI proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository24Test() throws ApiException {
        String repositoryName = null;
        PypiProxyRepositoryApiRequest body = null;
        api.updateRepository24(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Conan proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository25Test() throws ApiException {
        String repositoryName = null;
        ConanProxyRepositoryApiRequest body = null;
        api.updateRepository25(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update p2 proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository26Test() throws ApiException {
        String repositoryName = null;
        P2ProxyRepositoryApiRequest body = null;
        api.updateRepository26(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update R group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository27Test() throws ApiException {
        String repositoryName = null;
        RGroupRepositoryApiRequest body = null;
        api.updateRepository27(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update R hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository28Test() throws ApiException {
        String repositoryName = null;
        RHostedRepositoryApiRequest body = null;
        api.updateRepository28(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update R proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository29Test() throws ApiException {
        String repositoryName = null;
        RProxyRepositoryApiRequest body = null;
        api.updateRepository29(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update raw group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository3Test() throws ApiException {
        String repositoryName = null;
        RawGroupRepositoryApiRequest body = null;
        api.updateRepository3(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Bower group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository30Test() throws ApiException {
        String repositoryName = null;
        BowerGroupRepositoryApiRequest body = null;
        api.updateRepository30(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Bower hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository31Test() throws ApiException {
        String repositoryName = null;
        BowerHostedRepositoryApiRequest body = null;
        api.updateRepository31(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Bower proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository32Test() throws ApiException {
        String repositoryName = null;
        BowerProxyRepositoryApiRequest body = null;
        api.updateRepository32(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Docker group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository33Test() throws ApiException {
        String repositoryName = null;
        DockerGroupRepositoryApiRequest body = null;
        api.updateRepository33(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Docker hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository34Test() throws ApiException {
        String repositoryName = null;
        DockerHostedRepositoryApiRequest body = null;
        api.updateRepository34(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Docker group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository35Test() throws ApiException {
        String repositoryName = null;
        DockerProxyRepositoryApiRequest body = null;
        api.updateRepository35(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Git LFS hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository36Test() throws ApiException {
        String repositoryName = null;
        GitLfsHostedRepositoryApiRequest body = null;
        api.updateRepository36(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Yum group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository37Test() throws ApiException {
        String repositoryName = null;
        YumGroupRepositoryApiRequest body = null;
        api.updateRepository37(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Yum hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository38Test() throws ApiException {
        String repositoryName = null;
        YumHostedRepositoryApiRequest body = null;
        api.updateRepository38(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Yum proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository39Test() throws ApiException {
        String repositoryName = null;
        YumProxyRepositoryApiRequest body = null;
        api.updateRepository39(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update raw hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository4Test() throws ApiException {
        String repositoryName = null;
        RawHostedRepositoryApiRequest body = null;
        api.updateRepository4(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update raw proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository5Test() throws ApiException {
        String repositoryName = null;
        RawProxyRepositoryApiRequest body = null;
        api.updateRepository5(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Helm hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository6Test() throws ApiException {
        String repositoryName = null;
        HelmHostedRepositoryApiRequest body = null;
        api.updateRepository6(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update Helm proxy repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository7Test() throws ApiException {
        String repositoryName = null;
        HelmProxyRepositoryApiRequest body = null;
        api.updateRepository7(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update NuGet group repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository8Test() throws ApiException {
        String repositoryName = null;
        NugetGroupRepositoryApiRequest body = null;
        api.updateRepository8(repositoryName, body);

        // TODO: test validations
    }
    /**
     * Update NuGet hosted repository
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRepository9Test() throws ApiException {
        String repositoryName = null;
        NugetHostedRepositoryApiRequest body = null;
        api.updateRepository9(repositoryName, body);

        // TODO: test validations
    }
}
